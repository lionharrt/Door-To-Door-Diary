'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp, _initialiseProps;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactBootstrapTable = require('react-bootstrap-table');

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var menuButtonClass = {
    className: 'table-button table-button-menu-item'
};

var DataTable = (_temp = _class = function (_React$Component) {
    _inherits(DataTable, _React$Component);

    function DataTable(props) {
        _classCallCheck(this, DataTable);

        var _this = _possibleConstructorReturn(this, (DataTable.__proto__ || Object.getPrototypeOf(DataTable)).call(this, props));

        _initialiseProps.call(_this);

        _this.state = {
            showFilters: _this.props.isFiltered,
            clearFilters: false
        };
        _this.colRef = {};
        return _this;
    }

    _createClass(DataTable, [{
        key: 'componentWillUpdate',
        value: function componentWillUpdate(nextProps, nextState) {
            if (nextState.clearFilters) this.clearAllFilters();
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _props = this.props,
                keyField = _props.keyField,
                defaultSort = _props.defaultSort,
                tableColumns = _props.tableColumns,
                tableData = _props.tableData,
                dataTotalSize = _props.dataTotalSize,
                onPageChange = _props.onPageChange,
                onSizePerPageList = _props.onSizePerPageList,
                onSortChange = _props.onSortChange,
                currentPage = _props.currentPage,
                sizePerPage = _props.sizePerPage,
                sortName = _props.sortName,
                sortOrder = _props.sortOrder;


            var options = {
                paginationShowsTotal: this.renderShowsTotal,
                sizePerPage: sizePerPage,
                sizePerPageList: [10, 25, 50, 100],
                onSizePerPageList: onSizePerPageList,
                onSortChange: onSortChange,
                searchField: this.searchBox,
                page: currentPage,
                sortName: sortName,
                sortOrder: sortOrder,
                onPageChange: onPageChange,
                btnGroup: this.createCustomButtonGroup,
                onFilterChange: this.props.onFilterChange,
                exportCSVBtn: this.createCustomExportCSVButton,
                onExportToCSV: this.props.onExportToCSV
            };

            // Add sort options
            if (defaultSort) {
                options.defaultSortName = defaultSort[0];
                options.defaultSortOrder = defaultSort[1].toLowerCase();
            }

            var tableHeaderColumns = Object.values(tableColumns).map(function (filter) {
                // Set column defaults
                var thisRef = function thisRef(c) {
                    _this2.colRef[filter.column.key] = c;
                };
                var colProps = {
                    ref: thisRef,
                    dataField: filter.column.key,
                    key: filter.column.key,
                    dataAlign: 'center',
                    dataSort: true,
                    sortFunc: function sortFunc() {
                        return false;
                    },
                    hidden: false,
                    width: undefined,
                    filter: undefined,
                    className: '' + (_this2.state.showFilters ? '' : 'hide-filter')
                };

                // add data formatting
                if (filter.column.dataFormat) colProps.dataFormat = filter.column.dataFormat;

                // add data formatting extra data
                if (filter.column.formatExtraData) colProps.formatExtraData = filter.column.formatExtraData;

                // make column unsortable
                if (filter.column.searchable === false) colProps.dataSort = false;

                // make column hidden
                if (filter.column.hidden) colProps.hidden = true;

                // set column width
                if (filter.column.width) colProps.width = filter.column.width.toString();

                // prevent column csv export
                if (typeof filter.column.export !== 'undefined' && !filter.column.export) colProps.export = false;

                // set column filter, if searchable
                if (filter.column.searchable !== false) {
                    var defaultValue = '';
                    if (filter.column.defaultValue) defaultValue = filter.column.defaultValue;
                    colProps.filter = filter.getColumnFilterProps(defaultValue);
                }

                return _react2.default.createElement(
                    _reactBootstrapTable.TableHeaderColumn,
                    colProps,
                    filter.column.title
                );
            });

            var csvFileName = 'exportDownload_' + (0, _moment2.default)().format('YYYY-MM-DD_HH-mm') + '.csv';
            return _react2.default.createElement(
                'div',
                { style: { position: 'relative' } },
                _react2.default.createElement(
                    _reactBootstrapTable.BootstrapTable,
                    {
                        data: tableData || [],
                        exportCSV: true,
                        csvFileName: csvFileName,
                        remote: true,
                        search: true,
                        striped: true,
                        hover: true,
                        pagination: true,
                        fetchInfo: { dataTotalSize: dataTotalSize },
                        options: options,
                        keyField: keyField
                    },
                    tableHeaderColumns
                )
            );
        }
    }]);

    return DataTable;
}(_react2.default.Component), _initialiseProps = function _initialiseProps() {
    var _this3 = this;

    this.createCustomExportCSVButton = function () {
        var DataTableExportData = _this3.props.DataTableExportData;

        if (DataTableExportData && DataTableExportData.fetching) {
            return _react2.default.createElement(
                'div',
                _extends({
                    btnText: ''
                }, menuButtonClass),
                _react2.default.createElement(
                    'span',
                    { className: 'export-icon' },
                    _react2.default.createElement('b', null)
                ),
                'Preparing'
            );
        } else if (DataTableExportData && DataTableExportData.fetched) {
            return _react2.default.createElement(
                _reactBootstrapTable.ExportCSVButton,
                _extends({
                    btnText: ''
                }, menuButtonClass),
                _react2.default.createElement(
                    'span',
                    { className: 'export-icon' },
                    _react2.default.createElement('b', null)
                ),
                'Download'
            );
        }
        return _react2.default.createElement(
            _reactBootstrapTable.ExportCSVButton,
            _extends({
                btnText: ''
            }, menuButtonClass),
            _react2.default.createElement(
                'span',
                { className: 'export-icon' },
                _react2.default.createElement('b', null)
            ),
            'Export'
        );
    };

    this.startClearingAllFilters = function () {
        _this3.props.startClearingFilters();
        _this3.setState({
            clearFilters: true
        });
    };

    this.clearAllFilters = function () {
        Object.values(_this3.props.tableColumns).forEach(function (filter) {
            if (filter.column.filter && filter.column.filter.substring(0, 6) === 'Custom') {
                _this3.colRef[filter.column.key].refs.customFilter.customCleanFiltered();
            } else if (filter.column.filter && filter.column.filter === 'NumberFilter') {
                _this3.colRef[filter.column.key].applyFilter({
                    comparator: filter.column.defaultValue.comparator
                }); // retain comparator
            } else if (filter.column.filter && filter.column.filter === 'SelectFilter') {
                _this3.colRef[filter.column.key].applyFilter('');
            } else {
                _this3.colRef[filter.column.key].cleanFiltered();
            }
        });
        _this3.setState({
            clearFilters: false
        });
        _this3.props.clearFilters();
    };

    this.toggleFilters = function () {
        _this3.setState({
            showFilters: !_this3.state.showFilters
        });
    };

    this.createCustomButtonGroup = function (props) {
        var filtersType = 'hidden';
        if (_this3.state.showFilters) {
            if (_this3.props.isFiltered) {
                filtersType = 'filtered';
            } else {
                filtersType = 'shown';
            }
        }
        return _react2.default.createElement(
            _reactBootstrapTable.ButtonGroup,
            { className: 'table-button-menu', sizeClass: 'btn-group-md' },
            _react2.default.createElement(
                'button',
                _extends({}, menuButtonClass, {
                    onClick: function onClick() {
                        return _this3.props.refreshTable();
                    }
                }),
                _react2.default.createElement(
                    'span',
                    { className: 'refresh-icon' },
                    _react2.default.createElement('b', null)
                )
            ),
            filtersType === 'shown' && _react2.default.createElement(
                'button',
                _extends({}, menuButtonClass, {
                    onClick: function onClick() {
                        return _this3.toggleFilters();
                    }
                }),
                _react2.default.createElement(
                    'span',
                    { className: 'filter-icon filter-icon-shown' },
                    _react2.default.createElement('b', null)
                ),
                'Filter'
            ),
            filtersType === 'filtered' && _react2.default.createElement(
                'button',
                _extends({}, menuButtonClass, {
                    onClick: function onClick() {
                        return _this3.startClearingAllFilters();
                    }
                }),
                _react2.default.createElement(
                    'span',
                    { className: 'filter-icon filter-icon-clear' },
                    _react2.default.createElement('b', null)
                ),
                'Clear Filters'
            ),
            filtersType === 'hidden' && _react2.default.createElement(
                'button',
                _extends({}, menuButtonClass, {
                    onClick: function onClick() {
                        return _this3.toggleFilters();
                    }
                }),
                _react2.default.createElement(
                    'span',
                    { className: 'filter-icon' },
                    _react2.default.createElement('b', null)
                ),
                'Filter'
            ),
            props.exportCSVBtn,
            _this3.props.extraButtons && _this3.props.extraButtons()
        );
    };

    this.searchBox = function () {
        return _react2.default.createElement('input', {
            type: 'text',
            defaultValue: _this3.props.searchValue,
            placeholder: 'Search',
            onChange: _this3.props.onSearchChange
        });
    };

    this.renderShowsTotal = function (start, to, total) {
        return _react2.default.createElement(
            'div',
            { style: { float: 'right', fontSize: '10px', marginTop: '4px', marginRight: '-66px' } },
            'Showing ',
            start,
            ' to ',
            to,
            ' of ',
            total,
            ' Results'
        );
    };
}, _temp);


DataTable.propTypes = {
    DataTableExportData: _propTypes2.default.object,
    keyField: _propTypes2.default.string.isRequired,
    extraButtons: _propTypes2.default.func,
    defaultSort: _propTypes2.default.array,
    tableColumns: _propTypes2.default.object.isRequired,
    tableData: _propTypes2.default.any,
    dataTotalSize: _propTypes2.default.number.isRequired,
    onPageChange: _propTypes2.default.func.isRequired,
    onSizePerPageList: _propTypes2.default.func.isRequired,
    onSortChange: _propTypes2.default.func.isRequired,
    onSearchChange: _propTypes2.default.func.isRequired,
    onFilterChange: _propTypes2.default.func.isRequired,
    onExportToCSV: _propTypes2.default.func.isRequired,
    currentPage: _propTypes2.default.number.isRequired,
    sizePerPage: _propTypes2.default.number.isRequired,
    refreshTable: _propTypes2.default.func.isRequired,
    sortName: _propTypes2.default.string,
    sortOrder: _propTypes2.default.string,
    searchValue: _propTypes2.default.string,
    startClearingFilters: _propTypes2.default.func.isRequired,
    clearFilters: _propTypes2.default.func.isRequired,
    isFiltered: _propTypes2.default.bool
};

DataTable.defaultProps = {
    DataTableExportData: null,
    extraButtons: null,
    defaultSort: null,
    tableData: null,
    sortName: undefined,
    sortOrder: undefined,
    searchValue: undefined,
    isFiltered: false
};

exports.default = DataTable;