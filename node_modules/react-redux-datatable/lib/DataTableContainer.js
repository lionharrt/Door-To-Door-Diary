'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DataTableContainer = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactRedux = require('react-redux');

var _DataTable = require('./DataTable');

var _DataTable2 = _interopRequireDefault(_DataTable);

var _DataTable3 = require('./DataTable.actions');

var _LoadingGif = require('./LoadingGif/LoadingGif');

var _LoadingGif2 = _interopRequireDefault(_LoadingGif);

var _ColumnFilters = require('./ColumnFilters');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DataTableContainer = exports.DataTableContainer = function (_React$Component) {
    _inherits(DataTableContainer, _React$Component);

    function DataTableContainer(props) {
        _classCallCheck(this, DataTableContainer);

        var _this = _possibleConstructorReturn(this, (DataTableContainer.__proto__ || Object.getPrototypeOf(DataTableContainer)).call(this, props));

        _this.onFilterChange = function (filterObj) {
            if (_this.props.DataTableData && _this.props.DataTableData[_this.props.tableSettings.tableID]) {
                // check: do not update individually while clearing all filters
                if (!_this.state.clearingFilters) {
                    _this.columnFilters = (0, _ColumnFilters.generateColumnFilters)(_this.tableColumns, filterObj);
                    if (_this.props.tableSettings.useLocalStorage) {
                        var storageFilters = (0, _ColumnFilters.setStorageFilters)(_this.tableColumns, filterObj);
                        var previousTableFilters = JSON.parse(global.window.localStorage.getItem('tableFilters'));
                        var newTableFilters = void 0;
                        if (previousTableFilters) {
                            newTableFilters = _extends({}, previousTableFilters, _defineProperty({}, _this.props.tableSettings.tableID, storageFilters));
                        } else {
                            newTableFilters = _defineProperty({}, _this.props.tableSettings.tableID, storageFilters);
                        }
                        global.window.localStorage.setItem('tableFilters', JSON.stringify(newTableFilters));
                    }
                    _this.resetPagination();
                    _this.props.dispatch((0, _DataTable3.fetchTableData)(_this.props.tableSettings, _this.state.sizePerPage, 0, _this.state.sortName, _this.state.sortOrder, _this.searchValue, _this.columnFilters, _this.props.apiLocation));
                }
            }
        };

        _this.onSearchChange = function (e) {
            _this.resetPagination();
            var text = e.target.value.trim();
            if (_this.props.tableSettings.useLocalStorage) {
                var previousTableSearch = JSON.parse(global.window.localStorage.getItem('tableSearch'));
                var newTableSearch = void 0;
                if (previousTableSearch) {
                    newTableSearch = _extends({}, previousTableSearch, _defineProperty({}, _this.props.tableSettings.tableID, text));
                } else {
                    newTableSearch = _defineProperty({}, _this.props.tableSettings.tableID, text);
                }
                global.window.localStorage.setItem('tableSearch', JSON.stringify(newTableSearch));
            }
            _this.searchValue = text;
            _this.props.dispatch((0, _DataTable3.fetchTableData)(_this.props.tableSettings, _this.state.sizePerPage, 0, _this.state.sortName, _this.state.sortOrder, _this.searchValue, _this.columnFilters, _this.props.apiLocation));
        };

        _this.onSortChange = function (sortName, sortOrder) {
            var offset = (_this.state.currentPage - 1) * _this.state.sizePerPage;
            _this.props.dispatch((0, _DataTable3.fetchTableData)(_this.props.tableSettings, _this.state.sizePerPage, offset, sortName, sortOrder, _this.searchValue, _this.columnFilters, _this.props.apiLocation));
            _this.setState({
                sortName: sortName,
                sortOrder: sortOrder
            });
        };

        _this.onPageChange = function (page, sizePerPage) {
            var offset = (page - 1) * sizePerPage;
            _this.props.dispatch((0, _DataTable3.fetchTableData)(_this.props.tableSettings, sizePerPage, offset, _this.state.sortName, _this.state.sortOrder, _this.searchValue, _this.columnFilters, _this.props.apiLocation));
            _this.setState({
                currentPage: page
            });
        };

        _this.onSizePerPageList = function (sizePerPage) {
            _this.setState({
                sizePerPage: sizePerPage
            });
        };

        _this.onExportToCSV = function () {
            var tableID = _this.props.tableSettings.tableID;
            if (_this.props.DataTableExportData && _this.props.DataTableExportData[tableID] && _this.props.DataTableExportData[tableID].fetched) {
                var exportData = _this.props.DataTableExportData[tableID].data;
                _this.props.dispatch((0, _DataTable3.resetExport)(tableID));
                return exportData;
            } else if (!_this.props.DataTableExportData || !_this.props.DataTableExportData[tableID] || !_this.props.DataTableExportData[tableID].fetching) {
                _this.props.dispatch((0, _DataTable3.fetchTableData)(_this.props.tableSettings, 1000, 0, _this.state.sortName, _this.state.sortOrder, _this.searchValue, _this.columnFilters, _this.props.apiLocation));
            }
            return false;
        };

        _this.setupTable = function () {
            var tableColumns = _this.props.tableSettings.tableColumns;

            _this.tableColumns = (0, _ColumnFilters.setupTableColumns)(tableColumns);

            if (_this.props.tableSettings.useLocalStorage) {
                // set table search
                var previousTableSearch = JSON.parse(global.window.localStorage.getItem('tableSearch'));
                if (previousTableSearch && previousTableSearch[_this.props.tableSettings.tableID]) {
                    _this.searchValue = previousTableSearch[_this.props.tableSettings.tableID];
                }

                // set table filters
                var previousTableFilters = JSON.parse(global.window.localStorage.getItem('tableFilters'));
                if (previousTableFilters && previousTableFilters[_this.props.tableSettings.tableID]) {
                    (0, _ColumnFilters.setDefaultFilters)(_this.tableColumns, previousTableFilters[_this.props.tableSettings.tableID]);
                }
            }
        };

        _this.initiateTable = function () {
            var offset = (_this.state.currentPage - 1) * _this.state.sizePerPage;
            var filterObj = (0, _ColumnFilters.generateFilterObj)(_this.tableColumns);
            _this.columnFilters = (0, _ColumnFilters.generateColumnFilters)(_this.tableColumns, filterObj);
            _this.props.dispatch((0, _DataTable3.fetchTableData)(_this.props.tableSettings, _this.state.sizePerPage, offset, _this.state.sortName, _this.state.sortOrder, _this.searchValue, _this.columnFilters, _this.props.apiLocation));
        };

        _this.refreshTable = function () {
            var offset = (_this.state.currentPage - 1) * _this.state.sizePerPage;
            _this.props.dispatch((0, _DataTable3.fetchTableData)(_this.props.tableSettings, _this.state.sizePerPage, offset, _this.state.sortName, _this.state.sortOrder, _this.searchValue, _this.columnFilters, _this.props.apiLocation));
            _this.setState({
                lastRefresh: Date.now()
            });
        };

        _this.startClearingFilters = function () {
            _this.setState({
                clearingFilters: true
            });
        };

        _this.clearFilters = function () {
            if (_this.props.tableSettings.useLocalStorage) {
                var blankFilters = (0, _ColumnFilters.setStorageFilters)(_this.tableColumns, {});
                var previousTableFilters = JSON.parse(global.window.localStorage.getItem('tableFilters'));
                var newTableFilters = void 0;
                if (previousTableFilters) {
                    newTableFilters = _extends({}, previousTableFilters, _defineProperty({}, _this.props.tableSettings.tableID, blankFilters));
                } else {
                    newTableFilters = _defineProperty({}, _this.props.tableSettings.tableID, blankFilters);
                }
                global.window.localStorage.setItem('tableFilters', JSON.stringify(newTableFilters));
            }
            (0, _ColumnFilters.clearDefaultFilterValues)(_this.tableColumns);
            _this.props.dispatch((0, _DataTable3.fetchTableData)(_this.props.tableSettings, _this.state.sizePerPage, 0, _this.state.sortName, _this.state.sortOrder, _this.searchValue, undefined, _this.props.apiLocation));
            _this.setState({
                currentPage: 1,
                clearingFilters: false
            });
            _this.columnFilters = undefined;
        };

        _this.resetPagination = function () {
            _this.setState({
                currentPage: 1
            });
        };

        _this.makeFullscreen = function () {
            _this.setState({ isFullscreen: !_this.state.isFullscreen });
        };

        _this.state = {
            isFullscreen: false,
            sizePerPage: 10,
            currentPage: 1,
            sortName: undefined,
            sortOrder: undefined,
            clearingFilters: false,
            lastRefresh: 0
        };
        _this.searchValue = '' + (_this.props.tableSettings.defaultSearch ? _this.props.tableSettings.defaultSearch : '');
        _this.columnFilters = undefined;
        _this.setupTable();
        _this.initiateTable();
        return _this;
    }

    _createClass(DataTableContainer, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            if (typeof this.props.ownProps.setRef !== 'undefined') {
                this.props.ownProps.setRef(this);
            }
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            if (typeof this.props.ownProps.setRef !== 'undefined') {
                this.props.ownProps.setRef(null);
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var _props = this.props,
                tableSettings = _props.tableSettings,
                DataTableData = _props.DataTableData,
                DataTableExportData = _props.DataTableExportData;

            var minWidth = tableSettings.minWidth;
            var tableID = tableSettings.tableID;

            if (!tableID || DataTableData && DataTableData[tableID] && DataTableData[tableID].error) {
                return _react2.default.createElement(
                    'div',
                    { className: 'status_message offline' },
                    _react2.default.createElement(
                        'p',
                        null,
                        'The table failed to initialise. Please check you are connected to the internet and try again.'
                    )
                );
            }

            var isLoading = false;
            if (!DataTableData || !DataTableData[tableID] || !DataTableData[tableID].fetched) isLoading = true;

            var isFiltered = false;
            if (this.columnFilters && this.columnFilters.length > 0) {
                isFiltered = true;
            }

            var tableData = null;
            if (DataTableData && DataTableData[tableID] && DataTableData[tableID].data) {
                tableData = DataTableData[tableID].data;
            }

            var tableDataSize = 0;
            if (DataTableData && DataTableData[tableID] && DataTableData[tableID].dataTotalSize) {
                tableDataSize = DataTableData[tableID].dataTotalSize;
            }

            var exportData = null;
            if (DataTableExportData && DataTableExportData[tableID]) {
                exportData = DataTableExportData[tableID];
            }

            if (!tableSettings.extraToolbarItems) tableSettings.extraToolbarItems = null;
            return _react2.default.createElement(
                'div',
                {
                    className: '\n                  ' + tableSettings.wrapperType + '\n                  ' + (this.state.isFullscreen ? 'section-isFullscreen' : '') + '\n                  react-datatable\n              '
                },
                tableSettings.displayTitle && _react2.default.createElement(
                    'div',
                    { className: 'section-toolbar' },
                    _react2.default.createElement(
                        'span',
                        { className: 'section-toolbar-title' },
                        tableSettings.displayTitle
                    ),
                    tableSettings.extraToolbarItems && tableSettings.extraToolbarItems(),
                    _react2.default.createElement(
                        'div',
                        { className: 'section-toolbar-group' },
                        _react2.default.createElement(
                            'div',
                            {
                                className: '\n                              section-toolbar-icon\n                              section-toolbar-fullscreen\n                              ' + (this.state.isFullscreen ? 'section-toolbar-isFullscreen' : '') + '\n                          ',
                                title: 'Toggle Fullscreen',
                                onClick: this.makeFullscreen
                            },
                            'Fullscreen'
                        )
                    )
                ),
                _react2.default.createElement(
                    'div',
                    { className: 'inner', style: { overflow: 'auto' } },
                    _react2.default.createElement(
                        'div',
                        { style: { minWidth: minWidth } },
                        isLoading && _react2.default.createElement(
                            'div',
                            { className: 'loadingContainer', style: { opacity: 0.3 } },
                            _react2.default.createElement(_LoadingGif2.default, null)
                        ),
                        _react2.default.createElement(_DataTable2.default, {
                            keyField: tableSettings.keyField,
                            extraButtons: tableSettings.extraButtons,
                            defaultSort: tableSettings.defaultSort,
                            tableColumns: this.tableColumns,
                            tableData: tableData,
                            DataTableExportData: exportData,
                            dataTotalSize: tableDataSize,
                            onPageChange: this.onPageChange,
                            onSizePerPageList: this.onSizePerPageList,
                            onSortChange: this.onSortChange,
                            onSearchChange: this.onSearchChange,
                            onFilterChange: this.onFilterChange,
                            onExportToCSV: this.onExportToCSV,
                            currentPage: this.state.currentPage,
                            sizePerPage: this.state.sizePerPage,
                            refreshTable: this.refreshTable,
                            sortName: this.state.sortName,
                            sortOrder: this.state.sortOrder,
                            searchValue: this.searchValue,
                            isFiltered: isFiltered,
                            startClearingFilters: this.startClearingFilters,
                            clearFilters: this.clearFilters
                        })
                    )
                )
            );
        }
    }]);

    return DataTableContainer;
}(_react2.default.Component);

DataTableContainer.propTypes = {
    dispatch: _propTypes2.default.func.isRequired,
    tableSettings: _propTypes2.default.object.isRequired,
    apiLocation: _propTypes2.default.string.isRequired,
    DataTableData: _propTypes2.default.any,
    DataTableExportData: _propTypes2.default.object,
    ownProps: _propTypes2.default.func
};

DataTableContainer.defaultProps = {
    DataTableExportData: null,
    DataTableData: null,
    ownProps: function ownProps() {}
};

var mapStateToProps = function mapStateToProps(state, ownProps) {
    return {
        DataTableData: state.DataTableReducer.DataTableData,
        DataTableExportData: state.DataTableExportReducer.DataTableExportData,
        ownProps: ownProps
    };
};

exports.default = (0, _reactRedux.connect)(mapStateToProps)(DataTableContainer);